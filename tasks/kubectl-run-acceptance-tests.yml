platform: linux

image_resource:
  type: docker-image
  source:
    repository: eu.gcr.io/census-gcr/gcloud-kubectl

params:
  SERVICE_ACCOUNT_JSON:
  GCP_PROJECT_NAME:
  KUBERNETES_CLUSTER:
  ACCEPTANCE_TESTS_IMAGE:

inputs:
- name: acceptance-tests-repo
- name: batch-runner-repo

run:
  path: bash
  args:
    - -exc
    - |
      cat >~/gcloud-service-key.json <<EOL
      $SERVICE_ACCOUNT_JSON
      EOL

      # Use gcloud service account to configure kubectl
      gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
      gcloud container clusters get-credentials ${KUBERNETES_CLUSTER} --zone europe-west2 --project ${GCP_PROJECT_NAME}

      # Create an acceptance tests pod and run the acceptance tests in it
      # Env vars have to passed one by one as a --env flag each
      # The sleep is to give kubectl time to attach properly, otherwise the first few log lines are lost
      kubectl run acceptance-tests -it --command --rm --quiet \
      --generator=run-pod/v1 \
      --image=${ACCEPTANCE_TESTS_IMAGE} \
      --restart=Never \
      $(while read env; do echo --env=${env}; done < acceptance-tests-repo/kubernetes.env) \
      --env=SFTP_USERNAME=$(kubectl get secret sftp-credentials -o=jsonpath="{.data.username}" | base64 --decode) \
      --env=SFTP_PASSWORD=$(kubectl get secret sftp-credentials -o=jsonpath="{.data.password}" | base64 --decode) \
      --env=REDIS_SERVICE_HOST=$(kubectl get configmap redis-config -o=jsonpath="{.data.redis-host}") \
      --env=REDIS_SERVICE_PORT=$(kubectl get configmap redis-config -o=jsonpath="{.data.redis-port}") \
      --env=RECEIPT_TOPIC_PROJECT=$(kubectl get configmap pubsub-config -o=jsonpath="{.data.receipt-topic-project-id}") \
      --env=RECEIPT_TOPIC_ID=$(kubectl get configmap pubsub-config -o=jsonpath="{.data.receipt-topic-name}") \
      --env=GOOGLE_SERVICE_ACCOUNT_JSON=$(kubectl get secret pubsub-credentials -o=jsonpath="{.data['service-account-key\.json']}") \
      --env=GOOGLE_APPLICATION_CREDENTIALS="/app/service-account-key.json" \
      --env=RABBITMQ_USER=$(kubectl get secret rabbitmq -o=jsonpath="{.data.rabbitmq-username}" | base64 --decode) \
      --env=RABBITMQ_PASSWORD=$(kubectl get secret rabbitmq -o=jsonpath="{.data.rabbitmq-password}" | base64 --decode) \
      -- /bin/bash -c "sleep 2; behave acceptance_tests/features"


      # Run acceptance tests for unaddressed batch
      # Pre-delete to avoid unintentionally running with an old image
      kubectl delete deploy qid-batch-runner || true
      kubectl apply -f batch-runner-repo/qid-batch-runner.yml
      kubectl rollout status deploy qid-batch-runnder --watch=true --timeout=30
      kubectl exec -it qid-batch-runner -- /app/run_acceptance_tests.sh
      kubectl delete deploy qid-batch-runner
